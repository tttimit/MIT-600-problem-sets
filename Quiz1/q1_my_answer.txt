1)
    1.1 False
    1.2 True
    1.3 False
    1.4 False
    1.5 True        //False , only mutates list L[0]

2)
    0.1
    1.2
    1
    
    0.1 
    0.2 
    1.3
    2.4
    1

3)
    'atm'
    'htam' // hatm
    
4)    
def findAll(wordList, lStr):
    """assumes: wordList is a list of words in lowercase.
                lStr is a str of lowercase letters.
                No letter occurs in lStr more than once
       returns: a list of all the words in wordList that contain
                each of the letters in lStr exactly once and no
                letters not in lStr"""
    result = []
    dic = {}
    for s in lStr:
        dic[s] = 1
    for word in wordList:
        if len(word) > len(lStr):
            continue
        else:
            temp_dic = dic.copy()
            i = 0
            for char in word:
                if char not in temp_dic.keys():
                    break
                else:
                    del temp_dic[char]
                    i += 1
                if i == len(word):
                    result += [word,]
    return result
    
5)
    def addVectors(v1, v2):
    l1 = v1.copy()
    l2 = v2.copy()
    if len(l1) > len(l2):
        for k in range(len(l2)):
            l1[k] += l2[k]
        return l1
    else:
        for m in range(len(l1)):
            l2[m] += l1[m]
        return l2
        
6)
    6.1) 1
         5
         {}
         result not defined
         
7)
    7.1) 'n = 1'
         'n = 10'
       
    7.2)log(n)
    
8)
    Big O notation: e), b)   //B    e)是期望运行时间，而大O是最差情况
    
    Newton's method: d), f) // D   f)是指数，和牛顿方法没啥关系
    
    recursion: a) , c) // A
         